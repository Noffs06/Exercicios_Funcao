# -*- coding: utf-8 -*-
"""ExercicosDefinição.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TydjGmFsjPE2u0R1ufbPUQz1op3qFQT6
"""

def saudacao(nome):
  print('Olá', nome)

nome = input('Entre com seu nome: ')

saudacao(nome)

def areatriangulo(a,b):
  return((a * b)/2)

base = float(input('base: '))
altura = float(input('altura: '))

print(areatriangulo(base,altura))

def perimetro_retangulo(a, b):
  return(2* a + 2 * b)


base = float(input('informe a base do retangulo: '))
altura = float(input('informe a altura do retanngulo: '))

print(perimetro_retangulo(base, altura))

def saudacao(nome, mensagem):
  print('Olá', nome, '\b!', mensagem)


saudacao('João', 'Como você está?')


saudacao(mensagem = 'Tudo bem?', nome='Maria')

def calcular_valores(numero):
  triplo = numero * 3
  quadruplo = numero * 4
  quinta_potencia = numero ** 5
  return triplo, quadruplo, quinta_potencia

resultado = calcular_valores(2)
print(resultado)


triplo, quadruplo, quinta_potencia = calcular_valores(3)
print(triplo)
print(quadruplo)
print(quinta_potencia)

valores = [2, -1, 3 , -4]

def soma_pn(valores):
  soma_p = 0
  soma_n = 0
  for itemdalista in valores:
    if itemdalista > 0:
      soma_p += itemdalista
    else:
      soma_n += itemdalista

  return soma_p, soma_n


soma_p, soma_n = soma_pn(valores)
print(f'soma dos positivos = {soma_p}\nsoma dos negativos = {soma_n}')

L = [2, 4, 6]

def somas(seq):
  soma, soma2 = 0, 0
  for item in seq:
    soma += item
    soma2 = soma2 + item * item
  return soma, soma2

x1 , x2 = somas(L)




print(f'soma = {x1}; soma ao quadrado = {x2}')

num1 = float(input('Selecione o primeiro numero: '))
num2 = float(input('Selecione o segundo numero: '))

def exibirmenu():
  print('escolha uma opção:')
  print('1. Soma')
  print('2. Subtração')
  print('3. Multiplicação')
  print('4. Divisão')
  print('5. Potenciação')



def soma(a,b):
  return a + b
def subtracao(a,b):
  return a - b
def multiplicacao(a,b):
   return a * b
def divisao(a,b):
  return  a / b
def potencia(a,b):
  return a ** b


def calculadora():
  exibirmenu()
  opcao = input('Digite a operação desejada: ')
  if opcao in ('1', '2', '3', '4', '5'):
    pass
  if opcao == '1':
    print(soma(num1, num2))
  if opcao == '2':
    print(subtracao(num1, num2))
  if opcao == '3':
    print(multiplicacao(num1, num2))
  if opcao == '4':
    print(divisao(num1, num2))
  if opcao == '5':
    print(potencia(num1, num2))


calculadora()

cpf = []
multlista = []

for i in range(1,12):
  numcpf = int(input(f'selecione o {i}* numero do cpf: '))
  if numcpf <10:
    cpf.append(numcpf)
  else:
    print('apenas de 1 a 9.')
    break

def validacao1():
  contagem = 10
  novenum = cpf[:9]
  for i in novenum:
    mult = i * contagem
    contagem -=1
    multlista.append(mult)
  soma = sum(multlista)
  teste = (((soma  *10)%11)%10)
  return teste == cpf[9]

multlista2 = []
def validacao2():
  contagem2 = 11
  novenum2 = cpf[:10]
  for i in novenum2:
    mult = i * contagem2
    contagem2 -=1
    multlista2.append(mult)
  soma = sum(multlista2)
  teste = (((soma  *10)%11)%10)
  return teste == cpf[10]


if validacao1() and validacao2():
  print('esse CPF é valido')
else:
  print('esse CPF não é valido!')



def fatorial(n):
  if n == 1:
    return 1
  return n * fatorial(n-1)


fatorial(6)

def potencia(base, expoente):
 if expoente == 0:
  return 1
 return base * potencia(base, expoente-1)

potencia(3, 4)

#versao interativa
#potencia(a,b) = a * a * ... * a, b vezes
def potencia(a,b):
  pot = 1
  for _ in range(b):
    pot*= a
  return pot

potencia(5,3)

quadrado = lambda x: x **2

print(quadrado(3))

celsius_para_fahrenheit = lambda c: (c * 1.8 + 32)

celsius_para_fahrenheit(0)
celsius_para_fahrenheit(100)

